module uart_transmitter (
  input wire clk,       // Clock signal (50MHz)
  input wire rst_n,     // Active-low reset
  input wire start,     // Start transmission signal
  input wire [7:0] data, // 8-bit data to be transmitted
  output wire rs232_tx, // UART TX signal
  output wire done      // End of transmission signal
);

  // Internal Registers
  reg [7:0] r_data;      // Data register
  reg [1:0] state;       // State register (0: Idle, 1: Start, 2: Transmit)
  reg [12:0] baud_cnt;   // Baud rate counter
  reg bit_flag;          // Transmission flag (1: In progress, 0: Idle)
  reg [3:0] bit_cnt;     // Bit counter (4 bits for 8N1 UART format)

  // State parameters
  localparam IDLE = 2'b00;
  localparam START = 2'b01;
  localparam TRANSMIT = 2'b10;

  // Baud rate generation parameter
  localparam BAUD_RATE = 9600; //Replace with your desired baud rate

  // UART parameters
  localparam START_BIT = 1'b0;
  localparam STOP_BIT = 1'b1;

  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      r_data <= 8'b0;
      state <= IDLE;
      baud_cnt <= 13'b0;
      bit_flag <= 1'b0;
      bit_cnt <= 4'b0;
      done <= 1'b0;
    end else begin
      case (state)
        IDLE: begin
          if (start && !bit_flag) begin
            r_data <= data;
            state <= START;
            baud_cnt <= 13'b0;
            bit_flag <= 1'b1;
            bit_cnt <= 4'b0;
            rs232_tx <= START_BIT;
          end
        end

        START: begin
          if (baud_cnt < (50_000_000 / BAUD_RATE)) begin
            baud_cnt <= baud_cnt + 1;
          end 
           else begin
            baud_cnt <= 13'b0;
            rs232_tx <= r_data[0];
	    bit_cnt<=1;
            r_data <= {r_data[6:0], STOP_BIT};
            state <= TRANSMIT;
          end
        end

        TRANSMIT: begin
          rs232_tx <= r_data[0];
          r_data <= {r_data[6:0], STOP_BIT};
          bit_cnt <= bit_cnt + 1;
          if (bit_cnt == 4'b1010) begin
            state <= IDLE;
            bit_flag <= 1'b0;
            done <= 1'b1;
          end
        end
      endcase
    end
  end

endmodule